import * as Notifications from "expo-notifications";

// Fun√ß√£o simples para testar notifica√ß√µes imediatas
export async function testSimpleNotification() {
  try {
    // Solicitar permiss√µes
    const { status } = await Notifications.requestPermissionsAsync();

    if (status !== "granted") {
      console.log("Permiss√µes de notifica√ß√£o negadas");
      return false;
    }

    console.log("Permiss√µes concedidas, enviando notifica√ß√£o de teste...");

    // Enviar notifica√ß√£o imediata
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "Teste ScreenVerse! üé¨",
        body: "Se voc√™ est√° vendo isso, as notifica√ß√µes est√£o funcionando!",
        sound: true,
      },
      trigger: null, // Imediato
    });

    console.log("Notifica√ß√£o de teste enviada com sucesso!");
    return true;
  } catch (error) {
    console.error("Erro ao testar notifica√ß√£o:", error);
    return false;
  }
}

// Fun√ß√£o para agendar notifica√ß√£o em 10 segundos (para teste)
export async function testDelayedNotification() {
  try {
    const { status } = await Notifications.requestPermissionsAsync();

    if (status !== "granted") {
      console.log("Permiss√µes de notifica√ß√£o negadas");
      return false;
    }

    await Notifications.scheduleNotificationAsync({
      content: {
        title: "Teste com Delay! ‚è∞",
        body: "Esta notifica√ß√£o foi agendada para 10 segundos!",
        sound: true,
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
        seconds: 10,
        repeats: false,
      },
    });

    console.log("Notifica√ß√£o com delay agendada! Aguarde 10 segundos...");
    return true;
  } catch (error) {
    console.error("Erro ao agendar notifica√ß√£o:", error);
    return false;
  }
}

// Fun√ß√£o para cancelar todas as notifica√ß√µes
export async function cancelAllNotifications() {
  try {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log("Todas as notifica√ß√µes foram canceladas");
    return true;
  } catch (error) {
    console.error("Erro ao cancelar notifica√ß√µes:", error);
    return false;
  }
}

// Fun√ß√£o para verificar notifica√ß√µes agendadas
export async function checkScheduledNotifications() {
  try {
    const notifications =
      await Notifications.getAllScheduledNotificationsAsync();
    console.log("Notifica√ß√µes agendadas:", notifications.length);
    notifications.forEach((notification, index) => {
      console.log(
        `${index + 1}. ${notification.content.title} - ${
          notification.content.body
        }`
      );
    });
    return notifications;
  } catch (error) {
    console.error("Erro ao verificar notifica√ß√µes agendadas:", error);
    return [];
  }
}
